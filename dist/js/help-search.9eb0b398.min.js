webpackJsonp([3],{

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(29);


/***/ }),

/***/ 19:
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),

/***/ 24:
/***/ (function(module, exports) {

	/*
	* @Author               : mr.ben(66623978@qq.com)
	* @Date                 : 2017-08-02 16:13:42
	* @Last Modified by     : mr.ben
	* @Last Modified time   : 2017-08-02 16:13:42
	*/
	'use strict';
	(function ($) {
	    $.fn.searchText = function (val, opts) {
	        var options = {
	            divFlag: true,
	            divStr: " ",
	            markClass: "",
	            markColor: "red",
	            nullReport: true,
	            callback: function () {
	                return false;
	            }
	        };

	        var settings = $.extend({}, options, opts || {}), cls;

	        if (settings.markClass) {
	            cls = "class='" + settings.markClass + "'";
	        } else {
	            cls = "style='color:" + settings.markColor + ";'";
	        }

	        // 对前一次高亮处理的文字还原
	        $("span[rel='mark']").removeAttr("class").removeAttr("style").removeAttr("rel");

	        // 字符串正则表达式关键字转化
	        $.regTrim = function (s) {
	            var imp = /[\^\.\\\|\(\)\*\+\-\$\[\]\?]/g;
	            var imp_c = {};
	            imp_c["^"] = "\\^";
	            imp_c["."] = "\\.";
	            imp_c["\\"] = "\\\\";
	            imp_c["|"] = "\\|";
	            imp_c["("] = "\\(";
	            imp_c[")"] = "\\)";
	            imp_c["*"] = "\\*";
	            imp_c["+"] = "\\+";
	            imp_c["-"] = "\\-";
	            imp_c["$"] = "\$";
	            imp_c["["] = "\\[";
	            imp_c["]"] = "\\]";
	            imp_c["?"] = "\\?";
	            s = s.replace(imp, function (o) {
	                return imp_c[o];
	            });
	            return s;
	        };

	        // 循环
	        $(this).each(function () {
	            var _this = $(this);
	            val = $.trim(val);
	            if (val === "") {
	                alert("关键字为空");
	                return false;
	            } else {
	                // 将关键字push到数组之中
	                var arr = [];
	                if (settings.divFlag) {
	                    arr = val.split(settings.divStr);
	                } else {
	                    arr.push(val);
	                }
	            }
	            var html = _this.html();
	            // 删除注释
	            html = html.replace(/<!--(?:.*)\-->/g, "");

	            // 将HTML代码支离为HTML片段和文字片段，其中文字片段用于正则替换处理，而HTML片段置之不理
	            var tags = /[^<>]+|<(\/?)([A-Za-z]+)([^<>]*)>/g;
	            var a = html.match(tags), test = 0;
	            $.each(a, function (i, c) {
	                if (!/<(?:.|\s)*?>/.test(c)) {//非标签
	                    // 开始执行替换
	                    $.each(arr, function (index, con) {
	                        if (con === "") { return; }
	                        var reg = new RegExp($.regTrim(con), "g");
	                        if (reg.test(c)) {
	                            // 正则替换
	                            c = c.replace(reg, "♂" + con + "♀");
	                            test = 1;
	                        }
	                    });
	                    c = c.replace(/♂/g, "<span rel='mark' " + cls + ">").replace(/♀/g, "</span>");
	                    a[i] = c;
	                }
	            });
	            //将支离数组重新组成字符串
	            var new_html = a.join("");

	            $(this).html(new_html);

	            if (test === 0 && settings.nullReport) {
	                alert("没有搜索结果");
	                return false;
	            }

	            //执行回调函数
	            settings.callback();
	        });
	    }
	})(jQuery);

/***/ }),

/***/ 28:
/***/ (function(module, exports) {

	/*
	* @Author: asus
	* @Date:   2017-07-21 16:35:42
	* @Last Modified by:   asus
	* @Last Modified time: 2017-07-21 16:43:17
	*/
	'use strict';

	var conf = {
	    serverHost: 'https://api.fangjinnet.com:1000/api',
	    apiMethod: {
	        // 产品列表
	        productList: "ProductList",
	        // 产品详情
	        productDetail: "ProductDetail",
	        // 产品购买记录
	        productBuyRecord: "BuyRecord",
	        // 产品购买排行榜
	        productBuyRank: "ProductBuyRank",
	        // 产品类型
	        productTypeList: "GetProductTypes",

	        // 帮助类别
	        getHelpType: "GetHelpType",
	        // 帮助中心
	        helpCenterList: "HelpCenterListForPC",

	        // 我的好友
	        getFriendList : "GetFriendList"
	        
	    }
	};

	var F = {

	    config: conf,

	    cache: {
	        isLogin: false,
	        glb_user_phone: '',
	        glb_user_token: '',
	        glb_user_avator: ''
	    },

	    getKeys: Object.names || function (obj) {
	        var names = [], name = '';
	        for (name in obj) {
	            if (obj.hasOwnProperty(name))
	                names.push(name);
	        }
	        return names;
	    },

	    isPlainObject: function (value) {
	        return !!value && Object.prototype.toString.call(value) === '[object Object]';
	    },

	    isArray: function (value) {
	        return value instanceof Array
	    },

	    toArray: function (value) {
	        return Array.prototype.slice.call(value);
	    },

	    // 本地缓存
	    storage: {
	        /**
	         * 
	         * @param {} key 
	         * @returns {} 
	         */
	        getItem: function (key) {
	            //假如浏览器支持本地存储则从localStorage里getItem，否则乖乖用Cookie
	            return window.localStorage ? localStorage.getItem(key) : cookie.get(key);
	        },
	        /**
	         * 
	         * @param {} key 
	         * @param {} val 
	         * @returns {} 
	         */
	        setItem: function (key, val) {
	            //假如浏览器支持本地存储则调用localStorage，否则乖乖用Cookie
	            if (window.localStorage) {
	                localStorage.setItem(key, val);
	            } else {
	                cookie.set(key, val);
	            }
	        },
	        /**
	         * 
	         * @param {} key 
	         * @returns {} 
	         */
	        delItem: function (key) {
	            //假如浏览器支持本地存储则调用localStorage，否则乖乖用Cookie
	            if (window.localStorage) {
	                localStorage.removeItem(key);
	            } else {
	                cookie.remove(key, val);
	            }
	        },
	        /**
	         * 
	         * @returns {} 
	         */
	        clearItem: function () {
	            if (window.localStorage) {
	                localStorage.clear();
	            }
	        }
	    },
	    cookie: {
	        get: function (name) {
	            var nameEQ = name + "=";
	            //把cookie分割成组
	            var ca = document.cookie.split(';');
	            for (var i = 0; i < ca.length; i++) {
	                //取得字符串
	                var c = ca[i];
	                //判断一下字符串有没有前导空格
	                while (c.charAt(0) == ' ') {
	                    //有的话，从第二位开始取    
	                    c = c.substring(1, c.length);
	                }
	                //如果含有我们要的name
	                if (c.indexOf(nameEQ) == 0) {
	                    //解码并截取我们要值
	                    return unescape(c.substring(nameEQ.length, c.length));
	                }
	            }
	        },
	        set: function (name, value, options) {
	            if (F.isPlainObject(name)) {
	                for (var k in name) {
	                    if (name.hasOwnProperty(k)) this.set(k, name[k], value);
	                }
	            } else {
	                var opt = F.isPlainObject(options) ? options : { expires: options },
	                    expires = opt.expires !== undefined ? opt.expires : '',
	                    expiresType = typeof (expires),
	                    path = opt.path !== undefined ? ';path=' + opt.path : ';path=/',
	                    domain = opt.domain ? ';domain=' + opt.domain : '',
	                    secure = opt.secure ? ';secure' : '';

	                //过期时间
	                if (expiresType === 'string' && expires !== '') expires = new Date(expires);
	                else if (expiresType === 'number') expires = new Date(+new Date + 1000 * 60 * 60 * 24 * expires);
	                if (expires !== '' && 'toGMTString' in expires) expires = ';expires=' + expires.toGMTString();

	                document.cookie = name + "=" + escape(value) + expires + path + domain + secure;   //转码并赋值    
	            }
	        },
	        remove: function (names) {
	            names = F.isArray(names) ? names : F.toArray(arguments);
	            for (var i = 0, l = names.length; i < l; i++) {
	                this.set(names[i], '', -1);
	            }
	            return names;
	        },
	        clear: function () {
	            return this.remove(F.getKeys(this.all()));
	        },
	        all: function () {
	            if (document.cookie === '') return {};
	            var cookies = document.cookie.split('; '), result = {};
	            for (var i = 0, l = cookies.length; i < l; i++) {
	                var item = cookies[i].split('=');
	                result[unescape(item[0])] = unescape(item[1]);
	            }
	            return result;
	        }
	    },
	    // 网络请求
	    request: function (param) {
	        var _this = this;
	        $.ajax({
	            url: param.url || '',
	            data: param.data || '',
	            type: param.method || 'get',
	            async: param.async || true,
	            cache: param.cache || true,
	            dataType: param.type || 'json',
	            complete: param.complete,
	            beforeSend: param.beforeSend,
	            timeout: param.timeout || 1000 * 60 * 10,
	            success: function (res) {
	                // 请求成功
	                if (0 === res.s) {
	                    typeof param.success === 'function' && param.success(res.d, res.es);
	                }
	                // 没有登录状态，需要强制登录
	                else if (101 === res.status) {
	                    _this.doLogin();
	                }
	                // 请求数据错误
	                else if (1 === res.s) {
	                    typeof param.error === 'function' && param.error(res.es);
	                }else {
	                    typeof param.hideLoading === 'function' && param.hideLoading();
	                }
	            },
	            error: function (err, status) {
	                //如果出现timeout，不做处理
	                if (status === "timeout") {
	                    if (console) {
	                        console.log("ajax超时！  url=" + param.url);
	                    }
	                } else if (status === "abort") {
	                    if (console) {
	                        console.log("ajax客户端终止请求！  url=" + param.url);
	                    }
	                }
	                typeof param.error === 'function' && param.error(err.statusText);
	            }
	        });
	    },
	    // 获取 url 参数
	    getUrlParam: function (name) {
	        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');
	        var result = window.location.search.substr(1).match(reg);
	        return result ? decodeURIComponent(result[2]) : null;
	    },
	    // 字段的验证，支持非空、手机、邮箱的判断
	    validate: function (value, type) {
	        var value = $.trim(value);
	        // 非空验证
	        if ('require' === type) {
	            return !!value;
	        }
	        // 手机号验证
	        if ('phone' === type) {
	            return /^1\d{10}$/.test(value);
	        }
	        // 邮箱格式验证
	        if ('email' === type) {
	            return /^(\w)+(\.\w+)*@(\w)+((\.\w{2,3}){1,3})$/.test(value);
	        }
	    },
	    // 统一登录处理
	    doLogin: function () {
	        var _this = this, url = '';

	        if (_this.user.isLogin) {
	            // 已经登录 点击直接进入页面
	            window.location.href = url;
	        } else {
	            window.location.href = './user-login.html?redirect=' + encodeURIComponent(window.location.href);
	        }
	    },
	    goHome: function () {
	        window.location.href = '../view/user-login.html';
	    }
	};

	var app = {
	    ajaxSet: function (cache) {
	        cache = (cache === false ? false : true);
	        $.ajaxSetup({
	            contentType: "application/x-www-form-urlencoded;charset=utf-8",
	            cache: cache
	        });
	        //ajax全局设置  超时时间：8秒
	        $.ajaxSetup({
	            timeout: 1000 * 60 * 10
	        });

	        /**
	         * ajax请求开始时执行函数
	         * event    - 包含 event 对象
	         * xhr      - 包含 XMLHttpRequest 对象
	         * options  - 包含 AJAX 请求中使用的选项
	         */
	        $(document).ajaxSend(function (event, xhr, opt) {
	            if (opt.type.toLowerCase() === "post") {
	                if (opt.data != null && opt.data !== "" && typeof (opt.data) !== "undefined") {
	                    var data = JSON.parse(opt.data);
	                    data.P = 3;
	                    data.IE = false;
	                    data.T = F.cache.glb_user_token;
	                    opt.data = JSON.stringify(data);
	                }
	            }
	        });
	    }
	}

	$(function () {
	    app.ajaxSet();
	    // 用于普通页面的跨框架脚本攻击(CFS)防御
	    if (top.location != self.location) top.location.href = self.location;
	});

	module.exports = F;

/***/ }),

/***/ 29:
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(19);
	__webpack_require__(24);

	var _f = __webpack_require__(28);

	var page = {
	    init: function () {
	        this.onLoad();
	        this.bindEvent();
	    },
	    onLoad: function () {
	        this.loadHelpType();
	        this.loadHotQuestion();
	    },
	    bindEvent: function () {
	        var _this = this;

	        $("#F_online").on("click", function () {
	            window.open("http://q.url.cn/s/R5V04Em?_type=wpa");
	        }),
	            $(".list-box").on("mouseenter mouseleave", "li.q-item", function (e) {
	                $(this).hasClass("active") ? $(this).removeClass("hover") : $(this).addClass("hover")
	            }),
	            $(".s-history").on("click", "ul li", function () {
	                $(".search-bar .search").val();
	                $(".s-history").hide()
	            }).on("mousemove", "ul li", function (e) {
	                $(".s-history ul li").removeClass("hover"),
	                    $(this).addClass("hover")
	            }),
	            $(".search-bar .search").keyup(function (e) {
	                if (13 === e.keyCode) {
	                    var search_val = $(".search").val();
	                    _this.searchEvent(search_val);
	                }
	            }).focus(function () {
	                _this.searchData();
	            }).blur(function () {
	                setTimeout(function () {
	                    $(".s-history").hide()
	                }, 300);
	            });

	        $(".search-btn").click(function () {
	            var search_val = $.trim($(".search").val());
	            if (!!search_val) {
	                _this.searchEvent(search_val);
	            }
	        });
	    },
	    searchEvent: function (val) {
	        if (!!val) {
	            $("#search-link").attr("href", "./help/help-search.html?keywords=" + encodeURI(encodeURIComponent($.trim(val))));
	            document.getElementById("search-link").click();
	        }
	    },
	    searchData: function () {
	        var val = $(".search").val();

	        if (!val) {
	            $(".s-history").hide();
	            $(".s-history ul").html("");
	            return;
	        };

	        var param = {
	            QTitle: val
	        }, req = {
	            M: _f.config.apiMethod.helpCenterList,
	            D: JSON.stringify(param)
	        };
	        _f.request({
	            url: _f.getServerUrl(""),
	            data: JSON.stringify(req),
	            method: 'POST',
	            success: function (res) {
	                var data = JSON.parse(res);

	                var templateIndex = $("#history-list")[0].innerHTML;
	                var html = _f.renderHtml(templateIndex, data);

	                $(".s-history ul").html(html);

	                $(".s-history").searchText(val, {
	                    "markColor": "#0086e5",
	                    "nullReport": false
	                }), $(".s-history ul li:first").addClass("hover");
	                $(".s-history").show();
	            },
	            error: function () {

	            }
	        });
	    },
	    loadHotQuestion: function () {
	        var _this = this;
	        var req = {
	            M: _f.config.apiMethod.helpCenterList
	        };

	        _f.request({
	            url: _f.getServerUrl(""),
	            data: JSON.stringify(req),
	            method: 'POST',
	            success: function (res) {
	                var data = JSON.parse(res);
	                console.log(data);
	                _this.renderData(data);
	            },
	            error: function () {

	            }
	        });
	    },
	    loadHelpType: function () {
	        var _this = this;
	        var req = {
	            M: _f.config.apiMethod.getHelpType
	        };

	        _f.request({
	            url: _f.getServerUrl(""),
	            data: JSON.stringify(req),
	            method: 'POST',
	            success: function (res) {
	                var data = JSON.parse(res);
	                if (!!data && data.HelpTypeList.length > 0) {
	                    data.HelpTypeList.forEach(function (data) {
	                        if (!data.LinkUrl) {
	                            data.url = "help-list.html?tid=" + data.Id;
	                        } else {
	                            data.url = data.LinkUrl;
	                        }
	                    }, this);
	                }
	                var templateIndex = $("#keywords-list")[0].innerHTML;
	                var html = _f.renderHtml(templateIndex, data);
	                $('.keywords-list').html(html);
	            },
	            error: function () {

	            }
	        });
	    },
	    renderData: function (data) {
	        // 生成HTML
	        this.filter(data);
	        var templateIndex = $("#help-hot-list")[0].innerHTML;
	        var html = _f.renderHtml(templateIndex, data);
	        $('.help-hot-list').html(html);
	    },
	    filter: function (data) {
	        data.notEmpty = !!data.grid.length;
	    }
	};

	$(function () {
	    page.init();
	})

/***/ })

});