webpackJsonp([18],{

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(77);


/***/ }),

/***/ 27:
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _api = __webpack_require__(84);
	var _core = __webpack_require__(17);

	var _user = {
	    // 用户登录
	    login : function(userInfo, resolve, reject){
	        _core.request({
	            url     : _api.host,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 检查手机号是否注册
	    checkExistPhone :function(phone,resolve,reject){
	        _core.request({
	            url     : _api.host,
	            data    : {
	                type    : 'phone',
	                str     : phone
	            },
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 用户注册
	    register : function(userInfo, resolve, reject){
	        _core.request({
	            url     : _api.host,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 检查登录状态
	    checkLogin : function(){
	        if (!_core.cookie.get('F.token')) {
	           //_core.goHome();
	        }
	    },
	    // 重置密码
	    resetPassword : function(userInfo, resolve, reject){
	        _core.request({
	            url     : _api.host,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 获取用户信息
	    getUserInfo : function(resolve, reject){
	        _core.request({
	            url     : _api.host,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 更新个人信息
	    updateUserInfo : function(userInfo, resolve, reject){
	        _core.request({
	            url     : _api.host,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 登录状态下更新密码
	    updatePassword : function(userInfo, resolve, reject){
	        _core.request({
	            url     : _api.host,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 登出
	    logout : function(resolve, reject){
	        _core.request({
	            url     : _api.host,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	        
	        _core.cookie.remove('F.token');
	        _core.cookie.remove('F.phone');
	        _core.cookie.remove('F.avator');

	    },
	    getUserInfo:function(){
	        
	    }
	}

	_user.checkLogin();

	module.exports = _user;


/***/ }),

/***/ 77:
/***/ (function(module, exports, __webpack_require__) {

	/*
	* @Author: mr.ben(66623978) https://github.com/iNuoers/
	* @Date:   2017-07-20 09:12:27
	* @Last Modified by:   mr.ben
	* @Last Modified time: 2017-07-20 09:14:06
	*/

	'use strict';
	__webpack_require__(78);

	var _api = __webpack_require__(84);
	var _core = __webpack_require__(17);
	__webpack_require__(85)
	var _user = __webpack_require__(27);

	// 表单里的错误提示
	var formError = {
	    show: function (errMsg) {
	        $('.error').addClass('error-show').text(errMsg);
	    },
	    hide: function () {
	        $('.error').removeClass('error-show').text('');
	    }
	};

	// page 逻辑部分
	var page = {
	    init: function () {
	        this.bindEvent();
	    },

	    bindEvent: function () {
	        var _this = this;

	        // 登录按钮的点击
	        $('.loginbtn').click(function () {
	            _this.submit();
	        });

	        //
	        $(".login-form").keyup(function (e) {
	            e.preventDefault();
	            if (e.keyCode === 13) {
	                _this.submit();
	            }
	        });
	    },

	    submit: function () {

	        var formData = {
	            Domain: "pc",
	            DeviceName: '',
	            Phone: $.trim($("#phone").val()),
	            Pswd: $.trim($("#password").val())
	        }, req = {
	            M: _api.method.login,
	            D: JSON.stringify(formData)
	        }, validateResult = this.formValidate(formData);

	        if (validateResult.status) {
	            _user.login(JSON.stringify(req), function (res) {

	                var user = JSON.parse(res);
	                debugger
	                // 登录成功 保存状态 cookie
	                _core.cookie.set($.base64.btoa('F.token'), user.token, { path: '/' });
	                _core.cookie.set($.base64.btoa('F.phone'), user.member.phone, { path: '/' });
	                _core.cookie.set($.base64.btoa('F.avator'), user.member.headPhoto, { path: '/' });

	                _core.storage.setItem($.base64.btoa('f_ui_cache'), res);

	                //success redirect
	                window.location.href = _core.getUrlParam('redirect') || '/dist/view/my/index.html';

	            }, function (errMsg) {
	                formError.show(errMsg);
	            });
	        } else {
	            // 错误提示
	            formError.show(validateResult.msg);
	        }
	    },

	    formValidate: function (formData) {
	        var result = {
	            status: false,
	            msg: ''
	        };
	        if (!_core.validate(formData.Phone, 'require')) {
	            result.msg = '手机号码不能为空';
	            return result;
	        }
	        if (!_core.validate(formData.Pswd, 'require')) {
	            result.msg = '密码不能为空';
	            return result;
	        }
	        // 通过验证，返回正确提示
	        result.status = true;
	        result.msg = '验证通过';
	        return result;
	    }
	};

	$(function () {
	    page.init();
	});

/***/ }),

/***/ 78:
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),

/***/ 84:
/***/ (function(module, exports) {

	/*
	* @Author: mr.ben(66623978) https://github.com/iNuoers/
	* @Date:   2017-08-30 16:43:17
	* @Last Modified by:   mr.ben
	* @Last Modified time: 2017-08-30 16:43:17
	*/
	'use strict';

	var debug = false;

	var api = {
	    host: debug ? 'http://192.168.1.10:8001/api' : 'https://api.fangjinnet.com:1000/api',
	    method: {
	        // 产品列表
	        productList: "ProductList",
	        // 产品详情
	        productDetail: "ProductDetail",
	        // 产品购买记录
	        productBuyRecord: "BuyRecord",
	        // 产品购买排行榜
	        productBuyRank: "ProductBuyRank",
	        // 产品类型
	        productTypeList: "GetProductTypes",

	        // 帮助类别
	        getHelpType: "GetHelpType",
	        // 帮助中心
	        helpCenterList: "HelpCenterListForPC",

	        // 我的好友
	        getFriendList: "GetFriendList",

	        login: "Login"

	    }
	}

	module.exports = api

/***/ }),

/***/ 85:
/***/ (function(module, exports) {

	/*!
	 * jquery.base64.js 0.1 - https://github.com/yckart/jquery.base64.js
	 * Makes Base64 en & -decoding simpler as it is.
	 *
	 * Based upon: https://gist.github.com/Yaffle/1284012
	 *
	 * Copyright (c) 2012 Yannick Albert (http://yckart.com)
	 * Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php).
	 * 2013/02/10
	 **/
	;(function($) {

	    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
	        a256 = '',
	        r64 = [256],
	        r256 = [256],
	        i = 0;

	    var UTF8 = {

	        /**
	         * Encode multi-byte Unicode string into utf-8 multiple single-byte characters
	         * (BMP / basic multilingual plane only)
	         *
	         * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars
	         *
	         * @param {String} strUni Unicode string to be encoded as UTF-8
	         * @returns {String} encoded string
	         */
	        encode: function(strUni) {
	            // use regular expressions & String.replace callback function for better efficiency
	            // than procedural approaches
	            var strUtf = strUni.replace(/[\u0080-\u07ff]/g, // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz
	            function(c) {
	                var cc = c.charCodeAt(0);
	                return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);
	            })
	            .replace(/[\u0800-\uffff]/g, // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz
	            function(c) {
	                var cc = c.charCodeAt(0);
	                return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);
	            });
	            return strUtf;
	        },

	        /**
	         * Decode utf-8 encoded string back into multi-byte Unicode characters
	         *
	         * @param {String} strUtf UTF-8 string to be decoded back to Unicode
	         * @returns {String} decoded string
	         */
	        decode: function(strUtf) {
	            // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!
	            var strUni = strUtf.replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g, // 3-byte chars
	            function(c) { // (note parentheses for precence)
	                var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);
	                return String.fromCharCode(cc);
	            })
	            .replace(/[\u00c0-\u00df][\u0080-\u00bf]/g, // 2-byte chars
	            function(c) { // (note parentheses for precence)
	                var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;
	                return String.fromCharCode(cc);
	            });
	            return strUni;
	        }
	    };

	    while(i < 256) {
	        var c = String.fromCharCode(i);
	        a256 += c;
	        r256[i] = i;
	        r64[i] = b64.indexOf(c);
	        ++i;
	    }

	    function code(s, discard, alpha, beta, w1, w2) {
	        s = String(s);
	        var buffer = 0,
	            i = 0,
	            length = s.length,
	            result = '',
	            bitsInBuffer = 0;

	        while(i < length) {
	            var c = s.charCodeAt(i);
	            c = c < 256 ? alpha[c] : -1;

	            buffer = (buffer << w1) + c;
	            bitsInBuffer += w1;

	            while(bitsInBuffer >= w2) {
	                bitsInBuffer -= w2;
	                var tmp = buffer >> bitsInBuffer;
	                result += beta.charAt(tmp);
	                buffer ^= tmp << bitsInBuffer;
	            }
	            ++i;
	        }
	        if(!discard && bitsInBuffer > 0) result += beta.charAt(buffer << (w2 - bitsInBuffer));
	        return result;
	    }

	    var Plugin = $.base64 = function(dir, input, encode) {
	            return input ? Plugin[dir](input, encode) : dir ? null : this;
	        };

	    Plugin.btoa = Plugin.encode = function(plain, utf8encode) {
	        plain = Plugin.raw === false || Plugin.utf8encode || utf8encode ? UTF8.encode(plain) : plain;
	        plain = code(plain, false, r256, b64, 8, 6);
	        return plain + '===='.slice((plain.length % 4) || 4);
	    };

	    Plugin.atob = Plugin.decode = function(coded, utf8decode) {
	        coded = String(coded).split('=');
	        var i = coded.length;
	        do {--i;
	            coded[i] = code(coded[i], true, r64, a256, 6, 8);
	        } while (i > 0);
	        coded = coded.join('');
	        return Plugin.raw === false || Plugin.utf8decode || utf8decode ? UTF8.decode(coded) : coded;
	    };
	}(jQuery));

/***/ })

});