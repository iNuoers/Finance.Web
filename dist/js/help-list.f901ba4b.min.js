webpackJsonp([2],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(18);


/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(19);
	__webpack_require__(24);

	var template = __webpack_require__(25)
	var _header = __webpack_require__(26),
	    _f = _header._f;

	var page = {
	    init: function () {
	        this.onLoad();
	        this.bindEvent();
	    },
	    onLoad: function () {
	        this.loadHelpType();
	        this.loadHotQuestion();
	    },
	    bindEvent: function () {
	        var _this = this;

	        $("#F_online").on("click", function () {
	            window.open("http://q.url.cn/s/R5V04Em?_type=wpa");
	        });

	        $(".s-history").on("click", "ul li", function () {
	            $(".search-bar .search").val();
	            $(".s-history").hide()
	        }).on("mousemove", "ul li", function (e) {
	            $(".s-history ul li").removeClass("hover"),
	                $(this).addClass("hover")
	        });

	        $(".search-bar .search").keyup(function (e) {
	            if (13 === e.keyCode) {
	                var search_val = $(".search").val();
	                _this.searchEvent(search_val);
	            }
	        }).focus(function () {
	            _this.searchData();
	        }).blur(function () {
	            setTimeout(function () {
	                $(".s-history").hide()
	            }, 300);
	        });

	        $(".search-btn").click(function () {
	            var search_val = $.trim($(".search").val());
	            if (!!search_val) {
	                _this.searchEvent(search_val);
	            }
	        });
	    },
	    searchEvent: function (val) {
	        if (!!val) {
	            $("#search-link").attr("href", "./help/help-search.html?keywords=" + encodeURI(encodeURIComponent($.trim(val))));
	            document.getElementById("search-link").click();
	        }
	    },
	    searchData: function () {
	        var val = $(".search").val();

	        if (!val) {
	            $(".s-history").hide();
	            $(".s-history ul").html("");
	            return;
	        };

	        var param = {
	            QTitle: val
	        }, req = {
	            M: _f.config.apiMethod.helpCenterList,
	            D: JSON.stringify(param)
	        };
	        _f.request({
	            url: _f.config.serverHost,
	            data: JSON.stringify(req),
	            method: 'POST',
	            success: function (res) {
	                var data = JSON.parse(res);

	                var tpl = '<%if(grid.length>0) {%>' +
	                    '    <%for(i = 0; i < grid.length; i ++) {%>' +
	                    '        <% var data = grid[i]; %>' +
	                    '        <li><a href="<%=data.url%>" target="_blank"><%=data.QTitle%></a></li>' +
	                    '     <%}%>' +
	                    '<%}%>';

	                var html = template(tpl, data);
	                $(".s-history ul").html(html);

	                $(".s-history").searchText(val, {
	                    "markColor": "#0086e5",
	                    "nullReport": false
	                }), $(".s-history ul li:first").addClass("hover");
	                $(".s-history").show();
	            },
	            error: function () {

	            }
	        });
	    },
	    loadHotQuestion: function () {
	        var _this = this;
	        var req = {
	            M: _f.config.apiMethod.helpCenterList
	        };

	        _f.request({
	            url: _f.config.serverHost,
	            data: JSON.stringify(req),
	            method: 'POST',
	            success: function (res) {
	                var data = JSON.parse(res);

	                var tpl = '<div class="help-hot-list">' +
	                    '    <%if(grid.length>0) {%>' +
	                    '        <%for(i = 0; i < grid.length; i ++) {%>' +
	                    '            <% var data = grid[i]; %>' +
	                    '            <div class="hot-item"  data-help-id="<%=data.QId%>">' +
	                    '                <a href="./help-detail.html?id=<%=data.QId%>&tid=<%=data.TypeId%>">· <%=data.QTitle%></a>' +
	                    '            </div>' +
	                    '        <%}%>' +
	                    '    <%}else{%>' +
	                    '        <p class="err-tip">' +
	                    '            <span>空空如也，</span>' +
	                    '        </p>' +
	                    '    <%}%>' +
	                    '</div>';

	                var html = template(tpl, data);
	                $('.help-hot-list').html(html);
	            },
	            error: function () {

	            }
	        });
	    },
	    loadHelpType: function () {
	        var _this = this;
	        var req = {
	            M: _f.config.apiMethod.getHelpType
	        };

	        _f.request({
	            url: _f.config.serverHost,
	            data: JSON.stringify(req),
	            method: 'POST',
	            success: function (res) {
	                var data = JSON.parse(res);
	                if (!!data && data.HelpTypeList.length > 0) {
	                    data.HelpTypeList.forEach(function (data) {
	                        if (!data.LinkUrl) {
	                            data.url = "help-list.html?tid=" + data.Id;
	                        } else {
	                            data.url = data.LinkUrl;
	                        }
	                    }, this);
	                }

	                var tpl = '<%if(HelpTypeList.length>0) {%>' +
	                    '    <%for(i = 0; i < HelpTypeList.length; i ++) {%>' +
	                    '        <% var data = HelpTypeList[i]; %>' +
	                    '        <li><a href="<%=data.url%>" target="_blank"><%=data.Title%></a></li>' +
	                    '     <%}%>' +
	                    '<%}%>';

	                var html = template(tpl, data);
	                $('.keywords-list').html(html);
	            },
	            error: function () {

	            }
	        });
	    }
	};
	$(function () {
	    page.init();
	})

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */
/***/ (function(module, exports) {

	/*
	* @Author               : mr.ben(66623978@qq.com)
	* @Date                 : 2017-08-02 16:13:42
	* @Last Modified by     : mr.ben
	* @Last Modified time   : 2017-08-02 16:13:42
	*/
	'use strict';
	(function ($) {
	    $.fn.searchText = function (val, opts) {
	        var options = {
	            divFlag: true,
	            divStr: " ",
	            markClass: "",
	            markColor: "red",
	            nullReport: true,
	            callback: function () {
	                return false;
	            }
	        };

	        var settings = $.extend({}, options, opts || {}), cls;

	        if (settings.markClass) {
	            cls = "class='" + settings.markClass + "'";
	        } else {
	            cls = "style='color:" + settings.markColor + ";'";
	        }

	        // 对前一次高亮处理的文字还原
	        $("span[rel='mark']").removeAttr("class").removeAttr("style").removeAttr("rel");

	        // 字符串正则表达式关键字转化
	        $.regTrim = function (s) {
	            var imp = /[\^\.\\\|\(\)\*\+\-\$\[\]\?]/g;
	            var imp_c = {};
	            imp_c["^"] = "\\^";
	            imp_c["."] = "\\.";
	            imp_c["\\"] = "\\\\";
	            imp_c["|"] = "\\|";
	            imp_c["("] = "\\(";
	            imp_c[")"] = "\\)";
	            imp_c["*"] = "\\*";
	            imp_c["+"] = "\\+";
	            imp_c["-"] = "\\-";
	            imp_c["$"] = "\$";
	            imp_c["["] = "\\[";
	            imp_c["]"] = "\\]";
	            imp_c["?"] = "\\?";
	            s = s.replace(imp, function (o) {
	                return imp_c[o];
	            });
	            return s;
	        };

	        // 循环
	        $(this).each(function () {
	            var _this = $(this);
	            val = $.trim(val);
	            if (val === "") {
	                alert("关键字为空");
	                return false;
	            } else {
	                // 将关键字push到数组之中
	                var arr = [];
	                if (settings.divFlag) {
	                    arr = val.split(settings.divStr);
	                } else {
	                    arr.push(val);
	                }
	            }
	            var html = _this.html();
	            // 删除注释
	            html = html.replace(/<!--(?:.*)\-->/g, "");

	            // 将HTML代码支离为HTML片段和文字片段，其中文字片段用于正则替换处理，而HTML片段置之不理
	            var tags = /[^<>]+|<(\/?)([A-Za-z]+)([^<>]*)>/g;
	            var a = html.match(tags), test = 0;
	            $.each(a, function (i, c) {
	                if (!/<(?:.|\s)*?>/.test(c)) {//非标签
	                    // 开始执行替换
	                    $.each(arr, function (index, con) {
	                        if (con === "") { return; }
	                        var reg = new RegExp($.regTrim(con), "g");
	                        if (reg.test(c)) {
	                            // 正则替换
	                            c = c.replace(reg, "♂" + con + "♀");
	                            test = 1;
	                        }
	                    });
	                    c = c.replace(/♂/g, "<span rel='mark' " + cls + ">").replace(/♀/g, "</span>");
	                    a[i] = c;
	                }
	            });
	            //将支离数组重新组成字符串
	            var new_html = a.join("");

	            $(this).html(new_html);

	            if (test === 0 && settings.nullReport) {
	                alert("没有搜索结果");
	                return false;
	            }

	            //执行回调函数
	            settings.callback();
	        });
	    }
	})(jQuery);

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * template.js v0.7.1 (https://github.com/yanhaijing/template.js)
	 * API https://github.com/yanhaijing/template.js/blob/master/doc/api.md
	 * Copyright 2015 yanhaijing. All Rights Reserved
	 * Licensed under MIT (https://github.com/yanhaijing/template.js/blob/master/MIT-LICENSE.txt)
	 */
	;(function(root, factory) {
	    var template = factory(root);
	    if (true) {
	        // AMD
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return template;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node.js
	        module.exports = template;
	    } else {
	        // Browser globals
	        var _template = root.template;

	        template.noConflict = function() {
	            if (root.template === template) {
	                root.template = _template;
	            }

	            return template;
	        };
	        root.template = template;
	    }
	}(this, function(root) {
	    'use strict';
	    var o = {
	        sTag: '<%',//开始标签
	        eTag: '%>',//结束标签
	        compress: false,//是否压缩html
	        escape: true, //默认输出是否进行HTML转义
	        error: function (e) {}//错误回调
	    };
	    var functionMap = {}; //内部函数对象
	    //修饰器前缀
	    var modifierMap = {
	        '': function (param) {return nothing(param)},
	        'h': function (param) {return encodeHTML(param)},
	        'u': function (param) {return encodeURI(param)}
	    };

	    var toString = {}.toString;
	    var slice = [].slice;
	    function type(x) {
	        if(x === null){
	            return 'null';
	        }

	        var t= typeof x;

	        if(t !== 'object'){
	            return t;
	        }

	        var c = toString.call(x).slice(8, -1).toLowerCase();
	        if(c !== 'object'){
	            return c;
	        }

	        if(x.constructor==Object){
	            return c;
	        }

	        return 'unkonw';
	    }

	    function isObject(obj) {
	        return type(obj) === 'object';
	    }
	    function isFunction(fn) {
	        return type(fn) === 'function';
	    }
	    function isString(str) {
	        return type(str) === 'string';
	    }
	    function extend() {
	        var target = arguments[0] || {};
	        var arrs = slice.call(arguments, 1);
	        var len = arrs.length;
	     
	        for (var i = 0; i < len; i++) {
	            var arr = arrs[i];
	            for (var name in arr) {
	                target[name] = arr[name];
	            }
	     
	        }
	        return target;
	    }
	    function clone() {
	        var args = slice.call(arguments);
	        return extend.apply(null, [{}].concat(args));
	    }
	    function nothing(param) {
	        return param;
	    }
	    function encodeHTML(source) {
	        return String(source)
	            .replace(/&/g,'&amp;')
	            .replace(/</g,'&lt;')
	            .replace(/>/g,'&gt;')
	            .replace(/\\/g,'&#92;')
	            .replace(/"/g,'&quot;')
	            .replace(/'/g,'&#39;');
	    }
	    function compress(html) {
	        return html.replace(/\s+/g, ' ').replace(/<!--[\w\W]*?-->/g, '');
	    }
	    function consoleAdapter(cmd, msg) {
	        typeof console !== 'undefined' && console[cmd] && console[cmd](msg);
	    }
	    function handelError(e) {
	        var message = 'template.js error\n\n';

	        for (var key in e) {
	            message += '<' + key + '>\n' + e[key] + '\n\n';
	        }
	        message += '<message>\n' + e.message + '\n\n';
	        consoleAdapter('error', message);

	        o.error(e);
	        function error() {
	            return 'template.js error';
	        }
	        error.toString = function () {
	            return '__code__ = "template.js error"';
	        }
	        return error;
	    }
	    function parse(tpl, opt) {
	        var code = '';
	        var sTag = opt.sTag;
	        var eTag = opt.eTag;
	        var escape = opt.escape;
	        function parsehtml(line) {
	            // 单双引号转义，换行符替换为空格
	            line = line.replace(/('|")/g, '\\$1').replace(/\n/g, ' ');
	            return ';__code__ += ("' + line + '")\n';
	        }
	        function parsejs(line) {              
	            //var reg = /^(:?)(.*?)=(.*)$/;
	            var reg = /^(?:=|(:.*?)=)(.*)$/
	            var html;
	            var arr;
	            var modifier;

	            // = := :*=
	            // :h=123 [':h=123', 'h', '123']
	            if (arr = reg.exec(line)) {
	                html = arr[2]; // 输出
	                if (Boolean(arr[1])) {
	                    // :开头
	                    modifier = arr[1].slice(1);
	                } else {
	                    // = 开头
	                    modifier = escape ? 'h' : '';
	                }

	                return ';__code__ += __modifierMap__["' + modifier + '"](typeof (' + html + ') !== "undefined" ? (' + html + ') : "")\n';
	            }
	            
	            //原生js
	            return ';' + line + '\n';
	        }

	        var tokens = tpl.split(sTag);

	        for (var i = 0, len = tokens.length; i < len; i++) {
	            var token = tokens[i].split(eTag);

	            if (token.length === 1) {
	                code += parsehtml(token[0]);
	            } else {
	                code += parsejs(token[0], true);
	                if (token[1]) {
	                    code += parsehtml(token[1]);
	                }
	            }
	        }

	        return code;
	    }
	    function compiler(tpl, opt) {
	        var mainCode = parse(tpl, opt);

	        var headerCode = '\n' + 
	        '    var html = (function (__data__, __modifierMap__) {\n' + 
	        '        var __str__ = "", __code__ = "";\n' + 
	        '        for(var key in __data__) {\n' + 
	        '            __str__+=("var " + key + "=__data__[\'" + key + "\'];");\n' + 
	        '        }\n' + 
	        '        eval(__str__);\n\n';

	        var footerCode = '\n' + 
	        '        ;return __code__;\n' + 
	        '    }(__data__, __modifierMap__));\n' + 
	        '    return html;\n';

	        var code = headerCode + mainCode + footerCode;
	        code = code.replace(/[\r]/g, ' '); // ie 7 8 会报错，不知道为什么
	        try {
	            var Render = new Function('__data__', '__modifierMap__', code); 
	            Render.toString = function () {
	                return mainCode;
	            }
	            return Render;
	        } catch(e) {
	            e.temp = 'function anonymous(__data__, __modifierMap__) {' + code + '}';
	            throw e;
	        }  
	    }
	    function compile(tpl, opt) {
	        opt = clone(o, opt);

	        try {
	            var Render = compiler(tpl, opt);
	        } catch(e) {
	            e.name = 'CompileError';
	            e.tpl = tpl;
	            e.render = e.temp;
	            delete e.temp;
	            return handelError(e);
	        }

	        function render(data) {
	            data = clone(functionMap, data);
	            try {
	                var html = Render(data, modifierMap);
	                html = opt.compress ? compress(html) : html;
	                return html;
	            } catch(e) {
	                e.name = 'RenderError';
	                e.tpl = tpl;
	                e.render = Render.toString();
	                return handelError(e)();
	            }            
	        }

	        render.toString = function () {
	            return Render.toString();
	        };
	        return render;
	    }
	    function template(tpl, data) {
	        if (typeof tpl !== 'string') {
	            return '';
	        }

	        var fn = compile(tpl);
	        if (!isObject(data)) {
	            return fn;
	        }

	        return fn(data);
	    }

	    template.config = function (option) {
	        if (isObject(option)) {
	            o = extend(o, option);
	        }
	        return clone(o);
	    };

	    template.registerFunction = function(name, fn) {
	        if (!isString(name)) {
	            return clone(functionMap);
	        }
	        if (!isFunction(fn)) {
	            return functionMap[name];
	        }

	        return functionMap[name] = fn;
	    }
	    template.unregisterFunction = function (name) {
	        if (!isString(name)) {
	            return false;
	        }
	        delete functionMap[name];
	        return true;
	    }

	    template.registerModifier = function(name, fn) {
	        if (!isString(name)) {
	            return clone(modifierMap);
	        }
	        if (!isFunction(fn)) {
	            return modifierMap[name];
	        }

	        return modifierMap[name] = fn;
	    }
	    template.unregisterModifier = function (name) {
	        if (!isString(name)) {
	            return false;
	        }
	        delete modifierMap[name];
	        return true;
	    }

	    template.__encodeHTML = encodeHTML;
	    template.__compress = compress;
	    template.__handelError = handelError;
	    template.__compile = compile;
	    template.version = '0.7.1';
	    return template;
	}));


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var user = __webpack_require__(27)
	    , _user = user._user
	    , _f = user._f;

	// 导航
	var nav = {
	    init: function () {

	        this.bindEvent();
	        this.loadUserInfo();
	        this.loginTimeout();

	        return this;
	    },
	    loginTimeout: function () {
	        //登录超时20分钟
	        var setout = 20 * 60 * 1000;
	        var myTime = setTimeout(function () { timeOut(); }, setout);
	        top.layerout = {};
	        top.layerout.resetTime = function () {
	            clearTimeout(myTime);
	            myTime = setTimeout(function () { timeOut(); }, setout);
	        }

	        function timeOut() {
	            _user.logout();
	            alert('您已超时 请重新登录')
	            //window.location.reload();
	        }

	        $(document).off();

	        $(document).keydown(function (event) {
	            top.layerout.resetTime();
	        }).click(function (event) {
	            top.layerout.resetTime();
	        });
	    },
	    bindEvent: function () {
	        var _this = this;

	        if (navigator.userAgent.toLowerCase().indexOf('chrome') >= 0) {
	            $('input').autocomplete = 'off';
	        }

	        _this.scrollEvent();

	        // 登录点击事件
	        $('.js-login').click(function () {
	            _f.doLogin();
	        });
	        // 注册点击事件
	        $('.js-register').click(function () {
	            window.location.href = './user-register.html';
	        });
	        // 退出点击事件
	        $('.js-logout').click(function () {
	            _user.logout(function (res) {
	                window.location.reload();
	            }, function (errMsg) {
	                _f.errorTips(errMsg);
	            });
	        });
	    },
	    scrollEvent: function () {
	        var nav = $('.wdg-fjw-second-header');
	        $(window).bind("scroll", function () {
	            var t = $(window).scrollTop();
	            if (t > 36) {
	                nav.addClass("nav-hold");
	            } else {
	                nav.removeClass("nav-hold")
	            }
	        });
	    },
	    // 加载用户信息
	    loadUserInfo: function () {

	        var $header = $('.site-nav'),
	            $isLogin = $('.F_isLogin'),
	            $unLogin = $('.F_unLogin'),
	            $userIcon = $('.F_userIcon'),
	            $userPhone = $('.F_userPhone'),
	            $logout = $('.F_out');

	        //window.localStorage.getItem('f_ui_cache')
	        if (_f.cookie.get('F.token')) {

	            var user = JSON.parse(_f.storage.getItem('f_ui_cache'));

	            var html = ['<a href="https://www.lmlc.com/web/page/login/fund/overview.html?from=home_nav" target="_blank">您好，' + user.member.phone
	                + "&nbsp;&nbsp;</a>", '<a class="F_out" href="javascript:;">退出</a>'].join("");

	            $logout.show();
	            $unLogin.hide();
	            $isLogin.html(html).show();
	            $userPhone.html(user.member.phone);
	            $userIcon.attr('src', user.member.headPhoto);

	            _f.cache.isLogin = true;
	            _f.cache.glb_user_phone = user.member.phone;
	            _f.cache.glb_user_avator = user.member.headPhoto;
	            _f.cache.glb_user_token = _f.cookie.get('F.token');

	        } else {
	            $unLogin.css({
	                visibility: 'visible'
	            });
	            $logout.hide();
	            $isLogin.hide();
	            $userPhone.html('尊敬的用户');

	            _f.cache.isLogin = false;
	            _f.cache.glb_user_token = '';
	            _f.cache.glb_user_phone = '';
	            _f.cache.glb_user_avator = '';
	        }
	    }
	};
	nav.init();
	module.exports = {
	    _f: _f,
	    _user: _user
	};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _f = __webpack_require__(28);

	var _user = {
	    // 用户登录
	    login : function(userInfo, resolve, reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 检查手机号是否注册
	    checkExistPhone :function(phone,resolve,reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            data    : {
	                type    : 'phone',
	                str     : phone
	            },
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 用户注册
	    register : function(userInfo, resolve, reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 检查登录状态
	    checkLogin : function(){
	        if (!_f.cookie.get('F.token')) {
	           //_f.goHome();
	        }
	    },
	    // 重置密码
	    resetPassword : function(userInfo, resolve, reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 获取用户信息
	    getUserInfo : function(resolve, reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 更新个人信息
	    updateUserInfo : function(userInfo, resolve, reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 登录状态下更新密码
	    updatePassword : function(userInfo, resolve, reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            data    : userInfo,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	    },
	    // 登出
	    logout : function(resolve, reject){
	        _f.request({
	            url     : _f.config.serverHost,
	            method  : 'POST',
	            success : resolve,
	            error   : reject
	        });
	        
	        _f.cookie.remove('F.token');
	        _f.cookie.remove('F.phone');
	        _f.cookie.remove('F.avator');

	    },
	    getUserInfo:function(){
	        
	    }
	}
	module.exports = {
	    _user   : _user,
	    _f      : _f
	};
	_user.checkLogin();

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	/*
	* @Author: asus
	* @Date:   2017-07-21 16:35:42
	* @Last Modified by:   asus
	* @Last Modified time: 2017-07-21 16:43:17
	*/
	'use strict';

	var conf = {
	    serverHost: 'https://api.fangjinnet.com:1000/api',
	    apiMethod: {
	        // 产品列表
	        productList: "ProductList",
	        // 产品详情
	        productDetail: "ProductDetail",
	        // 产品购买记录
	        productBuyRecord: "BuyRecord",
	        // 产品购买排行榜
	        productBuyRank: "ProductBuyRank",
	        // 产品类型
	        productTypeList: "GetProductTypes",

	        // 帮助类别
	        getHelpType: "GetHelpType",
	        // 帮助中心
	        helpCenterList: "HelpCenterListForPC",

	        // 我的好友
	        getFriendList : "GetFriendList"
	        
	    }
	};

	var F = {

	    config: conf,

	    cache: {
	        isLogin: false,
	        glb_user_phone: '',
	        glb_user_token: '',
	        glb_user_avator: ''
	    },

	    getKeys: Object.names || function (obj) {
	        var names = [], name = '';
	        for (name in obj) {
	            if (obj.hasOwnProperty(name))
	                names.push(name);
	        }
	        return names;
	    },

	    isPlainObject: function (value) {
	        return !!value && Object.prototype.toString.call(value) === '[object Object]';
	    },

	    isArray: function (value) {
	        return value instanceof Array
	    },

	    toArray: function (value) {
	        return Array.prototype.slice.call(value);
	    },

	    // 本地缓存
	    storage: {
	        /**
	         * 
	         * @param {} key 
	         * @returns {} 
	         */
	        getItem: function (key) {
	            //假如浏览器支持本地存储则从localStorage里getItem，否则乖乖用Cookie
	            return window.localStorage ? localStorage.getItem(key) : cookie.get(key);
	        },
	        /**
	         * 
	         * @param {} key 
	         * @param {} val 
	         * @returns {} 
	         */
	        setItem: function (key, val) {
	            //假如浏览器支持本地存储则调用localStorage，否则乖乖用Cookie
	            if (window.localStorage) {
	                localStorage.setItem(key, val);
	            } else {
	                cookie.set(key, val);
	            }
	        },
	        /**
	         * 
	         * @param {} key 
	         * @returns {} 
	         */
	        delItem: function (key) {
	            //假如浏览器支持本地存储则调用localStorage，否则乖乖用Cookie
	            if (window.localStorage) {
	                localStorage.removeItem(key);
	            } else {
	                cookie.remove(key, val);
	            }
	        },
	        /**
	         * 
	         * @returns {} 
	         */
	        clearItem: function () {
	            if (window.localStorage) {
	                localStorage.clear();
	            }
	        }
	    },
	    cookie: {
	        get: function (name) {
	            var nameEQ = name + "=";
	            //把cookie分割成组
	            var ca = document.cookie.split(';');
	            for (var i = 0; i < ca.length; i++) {
	                //取得字符串
	                var c = ca[i];
	                //判断一下字符串有没有前导空格
	                while (c.charAt(0) == ' ') {
	                    //有的话，从第二位开始取    
	                    c = c.substring(1, c.length);
	                }
	                //如果含有我们要的name
	                if (c.indexOf(nameEQ) == 0) {
	                    //解码并截取我们要值
	                    return unescape(c.substring(nameEQ.length, c.length));
	                }
	            }
	        },
	        set: function (name, value, options) {
	            if (F.isPlainObject(name)) {
	                for (var k in name) {
	                    if (name.hasOwnProperty(k)) this.set(k, name[k], value);
	                }
	            } else {
	                var opt = F.isPlainObject(options) ? options : { expires: options },
	                    expires = opt.expires !== undefined ? opt.expires : '',
	                    expiresType = typeof (expires),
	                    path = opt.path !== undefined ? ';path=' + opt.path : ';path=/',
	                    domain = opt.domain ? ';domain=' + opt.domain : '',
	                    secure = opt.secure ? ';secure' : '';

	                //过期时间
	                if (expiresType === 'string' && expires !== '') expires = new Date(expires);
	                else if (expiresType === 'number') expires = new Date(+new Date + 1000 * 60 * 60 * 24 * expires);
	                if (expires !== '' && 'toGMTString' in expires) expires = ';expires=' + expires.toGMTString();

	                document.cookie = name + "=" + escape(value) + expires + path + domain + secure;   //转码并赋值    
	            }
	        },
	        remove: function (names) {
	            names = F.isArray(names) ? names : F.toArray(arguments);
	            for (var i = 0, l = names.length; i < l; i++) {
	                this.set(names[i], '', -1);
	            }
	            return names;
	        },
	        clear: function () {
	            return this.remove(F.getKeys(this.all()));
	        },
	        all: function () {
	            if (document.cookie === '') return {};
	            var cookies = document.cookie.split('; '), result = {};
	            for (var i = 0, l = cookies.length; i < l; i++) {
	                var item = cookies[i].split('=');
	                result[unescape(item[0])] = unescape(item[1]);
	            }
	            return result;
	        }
	    },
	    // 网络请求
	    request: function (param) {
	        var _this = this;
	        $.ajax({
	            url: param.url || '',
	            data: param.data || '',
	            type: param.method || 'get',
	            async: param.async || true,
	            cache: param.cache || true,
	            dataType: param.type || 'json',
	            complete: param.complete,
	            beforeSend: param.beforeSend,
	            timeout: param.timeout || 1000 * 60 * 10,
	            success: function (res) {
	                // 请求成功
	                if (0 === res.s) {
	                    typeof param.success === 'function' && param.success(res.d, res.es);
	                }
	                // 没有登录状态，需要强制登录
	                else if (101 === res.status) {
	                    _this.doLogin();
	                }
	                // 请求数据错误
	                else if (1 === res.s) {
	                    typeof param.error === 'function' && param.error(res.es);
	                }else {
	                    typeof param.hideLoading === 'function' && param.hideLoading();
	                }
	            },
	            error: function (err, status) {
	                //如果出现timeout，不做处理
	                if (status === "timeout") {
	                    if (console) {
	                        console.log("ajax超时！  url=" + param.url);
	                    }
	                } else if (status === "abort") {
	                    if (console) {
	                        console.log("ajax客户端终止请求！  url=" + param.url);
	                    }
	                }
	                typeof param.error === 'function' && param.error(err.statusText);
	            }
	        });
	    },
	    // 获取 url 参数
	    getUrlParam: function (name) {
	        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');
	        var result = window.location.search.substr(1).match(reg);
	        return result ? decodeURIComponent(result[2]) : null;
	    },
	    // 字段的验证，支持非空、手机、邮箱的判断
	    validate: function (value, type) {
	        var value = $.trim(value);
	        // 非空验证
	        if ('require' === type) {
	            return !!value;
	        }
	        // 手机号验证
	        if ('phone' === type) {
	            return /^1\d{10}$/.test(value);
	        }
	        // 邮箱格式验证
	        if ('email' === type) {
	            return /^(\w)+(\.\w+)*@(\w)+((\.\w{2,3}){1,3})$/.test(value);
	        }
	    },
	    // 统一登录处理
	    doLogin: function () {
	        var _this = this, url = '';

	        if (_this.user.isLogin) {
	            // 已经登录 点击直接进入页面
	            window.location.href = url;
	        } else {
	            window.location.href = './user-login.html?redirect=' + encodeURIComponent(window.location.href);
	        }
	    },
	    goHome: function () {
	        window.location.href = '../view/user-login.html';
	    }
	};

	var app = {
	    ajaxSet: function (cache) {
	        cache = (cache === false ? false : true);
	        $.ajaxSetup({
	            contentType: "application/x-www-form-urlencoded;charset=utf-8",
	            cache: cache
	        });
	        //ajax全局设置  超时时间：8秒
	        $.ajaxSetup({
	            timeout: 1000 * 60 * 10
	        });

	        /**
	         * ajax请求开始时执行函数
	         * event    - 包含 event 对象
	         * xhr      - 包含 XMLHttpRequest 对象
	         * options  - 包含 AJAX 请求中使用的选项
	         */
	        $(document).ajaxSend(function (event, xhr, opt) {
	            if (opt.type.toLowerCase() === "post") {
	                if (opt.data != null && opt.data !== "" && typeof (opt.data) !== "undefined") {
	                    var data = JSON.parse(opt.data);
	                    data.P = 3;
	                    data.IE = false;
	                    data.T = F.cache.glb_user_token;
	                    opt.data = JSON.stringify(data);
	                }
	            }
	        });
	    }
	}

	$(function () {
	    app.ajaxSet();
	    // 用于普通页面的跨框架脚本攻击(CFS)防御
	    if (top.location != self.location) top.location.href = self.location;
	});

	module.exports = F;

/***/ })
]);