/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".js/" + ({"1":"help-detail","2":"help-list","3":"help-search","4":"index","5":"my/caption","6":"my/coupon","7":"my/custody","8":"my/friends","9":"my/index","10":"my/invest","11":"my/paydeposit","12":"my/userinfo","13":"product/confirm","14":"product/detail","15":"product/index","16":"product/result","17":"safety","18":"user-login","19":"user-pass-reset","20":"user-register","21":"vendor"}[chunkId]||chunkId) + "." + "c52cf7e2" + ".min.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(17);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(2)
	__webpack_require__(7)
	__webpack_require__(9);

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 3 */,
/* 4 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function(useSourceMap) {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			return this.map(function (item) {
				var content = cssWithMappingToString(item, useSourceMap);
				if(item[2]) {
					return "@media " + item[2] + "{" + content + "}";
				} else {
					return content;
				}
			}).join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};

	function cssWithMappingToString(item, useSourceMap) {
		var content = item[1] || '';
		var cssMapping = item[3];
		if (!cssMapping) {
			return content;
		}

		if (useSourceMap && typeof btoa === 'function') {
			var sourceMapping = toComment(cssMapping);
			var sourceURLs = cssMapping.sources.map(function (source) {
				return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
			});

			return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
		}

		return [content].join('\n');
	}

	// Adapted from convert-source-map (MIT)
	function toComment(sourceMap) {
		// eslint-disable-next-line no-undef
		var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
		var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

		return '/*# ' + data + ' */';
	}


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/

	var stylesInDom = {};

	var	memoize = function (fn) {
		var memo;

		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	};

	var isOldIE = memoize(function () {
		// Test for IE <= 9 as proposed by Browserhacks
		// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
		// Tests for existence of standard globals is to allow style-loader
		// to operate correctly into non-standard environments
		// @see https://github.com/webpack-contrib/style-loader/issues/177
		return window && document && document.all && !window.atob;
	});

	var getElement = (function (fn) {
		var memo = {};

		return function(selector) {
			if (typeof memo[selector] === "undefined") {
				memo[selector] = fn.call(this, selector);
			}

			return memo[selector]
		};
	})(function (target) {
		return document.querySelector(target)
	});

	var singleton = null;
	var	singletonCounter = 0;
	var	stylesInsertedAtTop = [];

	var	fixUrls = __webpack_require__(6);

	module.exports = function(list, options) {
		if (false) {
			if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};

		options.attrs = typeof options.attrs === "object" ? options.attrs : {};

		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (!options.singleton) options.singleton = isOldIE();

		// By default, add <style> tags to the <head> element
		if (!options.insertInto) options.insertInto = "head";

		// By default, add <style> tags to the bottom of the target
		if (!options.insertAt) options.insertAt = "bottom";

		var styles = listToStyles(list, options);

		addStylesToDom(styles, options);

		return function update (newList) {
			var mayRemove = [];

			for (var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];

				domStyle.refs--;
				mayRemove.push(domStyle);
			}

			if(newList) {
				var newStyles = listToStyles(newList, options);
				addStylesToDom(newStyles, options);
			}

			for (var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];

				if(domStyle.refs === 0) {
					for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

					delete stylesInDom[domStyle.id];
				}
			}
		};
	};

	function addStylesToDom (styles, options) {
		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			if(domStyle) {
				domStyle.refs++;

				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}

				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];

				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}

				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles (list, options) {
		var styles = [];
		var newStyles = {};

		for (var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = options.base ? item[0] + options.base : item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};

			if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
			else newStyles[id].parts.push(part);
		}

		return styles;
	}

	function insertStyleElement (options, style) {
		var target = getElement(options.insertInto)

		if (!target) {
			throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
		}

		var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

		if (options.insertAt === "top") {
			if (!lastStyleElementInsertedAtTop) {
				target.insertBefore(style, target.firstChild);
			} else if (lastStyleElementInsertedAtTop.nextSibling) {
				target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				target.appendChild(style);
			}
			stylesInsertedAtTop.push(style);
		} else if (options.insertAt === "bottom") {
			target.appendChild(style);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement (style) {
		if (style.parentNode === null) return false;
		style.parentNode.removeChild(style);

		var idx = stylesInsertedAtTop.indexOf(style);
		if(idx >= 0) {
			stylesInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement (options) {
		var style = document.createElement("style");

		options.attrs.type = "text/css";

		addAttrs(style, options.attrs);
		insertStyleElement(options, style);

		return style;
	}

	function createLinkElement (options) {
		var link = document.createElement("link");

		options.attrs.type = "text/css";
		options.attrs.rel = "stylesheet";

		addAttrs(link, options.attrs);
		insertStyleElement(options, link);

		return link;
	}

	function addAttrs (el, attrs) {
		Object.keys(attrs).forEach(function (key) {
			el.setAttribute(key, attrs[key]);
		});
	}

	function addStyle (obj, options) {
		var style, update, remove, result;

		// If a transform function was defined, run it on the css
		if (options.transform && obj.css) {
		    result = options.transform(obj.css);

		    if (result) {
		    	// If transform returns a value, use that instead of the original css.
		    	// This allows running runtime transformations on the css.
		    	obj.css = result;
		    } else {
		    	// If the transform function returns a falsy value, don't add this css.
		    	// This allows conditional loading of css
		    	return function() {
		    		// noop
		    	};
		    }
		}

		if (options.singleton) {
			var styleIndex = singletonCounter++;

			style = singleton || (singleton = createStyleElement(options));

			update = applyToSingletonTag.bind(null, style, styleIndex, false);
			remove = applyToSingletonTag.bind(null, style, styleIndex, true);

		} else if (
			obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function"
		) {
			style = createLinkElement(options);
			update = updateLink.bind(null, style, options);
			remove = function () {
				removeStyleElement(style);

				if(style.href) URL.revokeObjectURL(style.href);
			};
		} else {
			style = createStyleElement(options);
			update = applyToTag.bind(null, style);
			remove = function () {
				removeStyleElement(style);
			};
		}

		update(obj);

		return function updateStyle (newObj) {
			if (newObj) {
				if (
					newObj.css === obj.css &&
					newObj.media === obj.media &&
					newObj.sourceMap === obj.sourceMap
				) {
					return;
				}

				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;

			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag (style, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (style.styleSheet) {
			style.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = style.childNodes;

			if (childNodes[index]) style.removeChild(childNodes[index]);

			if (childNodes.length) {
				style.insertBefore(cssNode, childNodes[index]);
			} else {
				style.appendChild(cssNode);
			}
		}
	}

	function applyToTag (style, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			style.setAttribute("media", media)
		}

		if(style.styleSheet) {
			style.styleSheet.cssText = css;
		} else {
			while(style.firstChild) {
				style.removeChild(style.firstChild);
			}

			style.appendChild(document.createTextNode(css));
		}
	}

	function updateLink (link, options, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		/*
			If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
			and there is no publicPath defined then lets turn convertToAbsoluteUrls
			on by default.  Otherwise default to the convertToAbsoluteUrls option
			directly
		*/
		var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

		if (options.convertToAbsoluteUrls || autoFixUrls) {
			css = fixUrls(css);
		}

		if (sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = link.href;

		link.href = URL.createObjectURL(blob);

		if(oldSrc) URL.revokeObjectURL(oldSrc);
	}


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	
	/**
	 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
	 * embed the css on the page. This breaks all relative urls because now they are relative to a
	 * bundle instead of the current page.
	 *
	 * One solution is to only use full urls, but that may be impossible.
	 *
	 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
	 *
	 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
	 *
	 */

	module.exports = function (css) {
	  // get current location
	  var location = typeof window !== "undefined" && window.location;

	  if (!location) {
	    throw new Error("fixUrls requires window.location");
	  }

		// blank or null?
		if (!css || typeof css !== "string") {
		  return css;
	  }

	  var baseUrl = location.protocol + "//" + location.host;
	  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

		// convert each url(...)
		/*
		This regular expression is just a way to recursively match brackets within
		a string.

		 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
		   (  = Start a capturing group
		     (?:  = Start a non-capturing group
		         [^)(]  = Match anything that isn't a parentheses
		         |  = OR
		         \(  = Match a start parentheses
		             (?:  = Start another non-capturing groups
		                 [^)(]+  = Match anything that isn't a parentheses
		                 |  = OR
		                 \(  = Match a start parentheses
		                     [^)(]*  = Match anything that isn't a parentheses
		                 \)  = Match a end parentheses
		             )  = End Group
	              *\) = Match anything and then a close parens
	          )  = Close non-capturing group
	          *  = Match anything
	       )  = Close capturing group
		 \)  = Match a close parens

		 /gi  = Get all matches, not the first.  Be case insensitive.
		 */
		var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
			// strip quotes (if they exist)
			var unquotedOrigUrl = origUrl
				.trim()
				.replace(/^"(.*)"$/, function(o, $1){ return $1; })
				.replace(/^'(.*)'$/, function(o, $1){ return $1; });

			// already a full url? no change
			if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
			  return fullMatch;
			}

			// convert the url to a full url
			var newUrl;

			if (unquotedOrigUrl.indexOf("//") === 0) {
			  	//TODO: should we add protocol?
				newUrl = unquotedOrigUrl;
			} else if (unquotedOrigUrl.indexOf("/") === 0) {
				// path should be relative to the base url
				newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
			} else {
				// path should be relative to current directory
				newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
			}

			// send back the fixed url(...)
			return "url(" + JSON.stringify(newUrl) + ")";
		});

		// send back the fixed css
		return fixedCss;
	};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 8 */,
/* 9 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */
/***/ (function(module, exports) {

	/*
	* @Author: asus
	* @Date:   2017-07-21 16:35:42
	* @Last Modified by:   asus
	* @Last Modified time: 2017-07-21 16:43:17
	*/
	'use strict';

	var conf = {
	    serverHost: 'https://api.fangjinnet.com:1000/api',
	    apiMethod: {
	        // 产品列表
	        productList: "ProductList",
	        // 产品详情
	        productDetail: "ProductDetail",
	        // 产品购买记录
	        productBuyRecord: "BuyRecord",
	        // 产品购买排行榜
	        productBuyRank: "ProductBuyRank",
	        // 产品类型
	        productTypeList: "GetProductTypes",

	        // 帮助类别
	        getHelpType: "GetHelpType",
	        // 帮助中心
	        helpCenterList: "HelpCenterListForPC",

	        // 我的好友
	        getFriendList : "GetFriendList"
	        
	    }
	};

	var F = {

	    config: conf,

	    cache: {
	        isLogin: false,
	        glb_user_phone: '',
	        glb_user_token: '',
	        glb_user_avator: ''
	    },

	    getKeys: Object.names || function (obj) {
	        var names = [], name = '';
	        for (name in obj) {
	            if (obj.hasOwnProperty(name))
	                names.push(name);
	        }
	        return names;
	    },

	    isPlainObject: function (value) {
	        return !!value && Object.prototype.toString.call(value) === '[object Object]';
	    },

	    isArray: function (value) {
	        return value instanceof Array
	    },

	    toArray: function (value) {
	        return Array.prototype.slice.call(value);
	    },

	    // 本地缓存
	    storage: {
	        /**
	         * 
	         * @param {} key 
	         * @returns {} 
	         */
	        getItem: function (key) {
	            //假如浏览器支持本地存储则从localStorage里getItem，否则乖乖用Cookie
	            return window.localStorage ? localStorage.getItem(key) : cookie.get(key);
	        },
	        /**
	         * 
	         * @param {} key 
	         * @param {} val 
	         * @returns {} 
	         */
	        setItem: function (key, val) {
	            //假如浏览器支持本地存储则调用localStorage，否则乖乖用Cookie
	            if (window.localStorage) {
	                localStorage.setItem(key, val);
	            } else {
	                cookie.set(key, val);
	            }
	        },
	        /**
	         * 
	         * @param {} key 
	         * @returns {} 
	         */
	        delItem: function (key) {
	            //假如浏览器支持本地存储则调用localStorage，否则乖乖用Cookie
	            if (window.localStorage) {
	                localStorage.removeItem(key);
	            } else {
	                cookie.remove(key, val);
	            }
	        },
	        /**
	         * 
	         * @returns {} 
	         */
	        clearItem: function () {
	            if (window.localStorage) {
	                localStorage.clear();
	            }
	        }
	    },
	    cookie: {
	        get: function (name) {
	            var nameEQ = name + "=";
	            //把cookie分割成组
	            var ca = document.cookie.split(';');
	            for (var i = 0; i < ca.length; i++) {
	                //取得字符串
	                var c = ca[i];
	                //判断一下字符串有没有前导空格
	                while (c.charAt(0) == ' ') {
	                    //有的话，从第二位开始取    
	                    c = c.substring(1, c.length);
	                }
	                //如果含有我们要的name
	                if (c.indexOf(nameEQ) == 0) {
	                    //解码并截取我们要值
	                    return unescape(c.substring(nameEQ.length, c.length));
	                }
	            }
	        },
	        set: function (name, value, options) {
	            if (F.isPlainObject(name)) {
	                for (var k in name) {
	                    if (name.hasOwnProperty(k)) this.set(k, name[k], value);
	                }
	            } else {
	                var opt = F.isPlainObject(options) ? options : { expires: options },
	                    expires = opt.expires !== undefined ? opt.expires : '',
	                    expiresType = typeof (expires),
	                    path = opt.path !== undefined ? ';path=' + opt.path : ';path=/',
	                    domain = opt.domain ? ';domain=' + opt.domain : '',
	                    secure = opt.secure ? ';secure' : '';

	                //过期时间
	                if (expiresType === 'string' && expires !== '') expires = new Date(expires);
	                else if (expiresType === 'number') expires = new Date(+new Date + 1000 * 60 * 60 * 24 * expires);
	                if (expires !== '' && 'toGMTString' in expires) expires = ';expires=' + expires.toGMTString();

	                document.cookie = name + "=" + escape(value) + expires + path + domain + secure;   //转码并赋值    
	            }
	        },
	        remove: function (names) {
	            names = F.isArray(names) ? names : F.toArray(arguments);
	            for (var i = 0, l = names.length; i < l; i++) {
	                this.set(names[i], '', -1);
	            }
	            return names;
	        },
	        clear: function () {
	            return this.remove(F.getKeys(this.all()));
	        },
	        all: function () {
	            if (document.cookie === '') return {};
	            var cookies = document.cookie.split('; '), result = {};
	            for (var i = 0, l = cookies.length; i < l; i++) {
	                var item = cookies[i].split('=');
	                result[unescape(item[0])] = unescape(item[1]);
	            }
	            return result;
	        }
	    },
	    // 网络请求
	    request: function (param) {
	        var _this = this;
	        $.ajax({
	            url: param.url || '',
	            data: param.data || '',
	            type: param.method || 'get',
	            async: param.async || true,
	            cache: param.cache || true,
	            dataType: param.type || 'json',
	            complete: param.complete,
	            beforeSend: param.beforeSend,
	            timeout: param.timeout || 1000 * 60 * 10,
	            success: function (res) {
	                // 请求成功
	                if (0 === res.s) {
	                    typeof param.success === 'function' && param.success(res.d, res.es);
	                }
	                // 没有登录状态，需要强制登录
	                else if (101 === res.status) {
	                    _this.doLogin();
	                }
	                // 请求数据错误
	                else if (1 === res.s) {
	                    typeof param.error === 'function' && param.error(res.es);
	                }else {
	                    typeof param.hideLoading === 'function' && param.hideLoading();
	                }
	            },
	            error: function (err, status) {
	                //如果出现timeout，不做处理
	                if (status === "timeout") {
	                    if (console) {
	                        console.log("ajax超时！  url=" + param.url);
	                    }
	                } else if (status === "abort") {
	                    if (console) {
	                        console.log("ajax客户端终止请求！  url=" + param.url);
	                    }
	                }
	                typeof param.error === 'function' && param.error(err.statusText);
	            }
	        });
	    },
	    // 获取 url 参数
	    getUrlParam: function (name) {
	        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');
	        var result = window.location.search.substr(1).match(reg);
	        return result ? decodeURIComponent(result[2]) : null;
	    },
	    // 字段的验证，支持非空、手机、邮箱的判断
	    validate: function (value, type) {
	        var value = $.trim(value);
	        // 非空验证
	        if ('require' === type) {
	            return !!value;
	        }
	        // 手机号验证
	        if ('phone' === type) {
	            return /^1\d{10}$/.test(value);
	        }
	        // 邮箱格式验证
	        if ('email' === type) {
	            return /^(\w)+(\.\w+)*@(\w)+((\.\w{2,3}){1,3})$/.test(value);
	        }
	    },
	    // 统一登录处理
	    doLogin: function () {
	        var _this = this, url = '';

	        if (_this.user.isLogin) {
	            // 已经登录 点击直接进入页面
	            window.location.href = url;
	        } else {
	            window.location.href = './user-login.html?redirect=' + encodeURIComponent(window.location.href);
	        }
	    },
	    goHome: function () {
	        window.location.href = '../view/user-login.html';
	    }
	};

	var app = {
	    ajaxSet: function (cache) {
	        cache = (cache === false ? false : true);
	        $.ajaxSetup({
	            contentType: "application/x-www-form-urlencoded;charset=utf-8",
	            cache: cache
	        });
	        //ajax全局设置  超时时间：8秒
	        $.ajaxSetup({
	            timeout: 1000 * 60 * 10
	        });

	        /**
	         * ajax请求开始时执行函数
	         * event    - 包含 event 对象
	         * xhr      - 包含 XMLHttpRequest 对象
	         * options  - 包含 AJAX 请求中使用的选项
	         */
	        $(document).ajaxSend(function (event, xhr, opt) {
	            if (opt.type.toLowerCase() === "post") {
	                if (opt.data != null && opt.data !== "" && typeof (opt.data) !== "undefined") {
	                    var data = JSON.parse(opt.data);
	                    data.P = 3;
	                    data.IE = false;
	                    data.T = F.cache.glb_user_token;
	                    opt.data = JSON.stringify(data);
	                }
	            }
	        });
	    }
	}

	$(function () {
	    app.ajaxSet();
	    // 用于普通页面的跨框架脚本攻击(CFS)防御
	    if (top.location != self.location) top.location.href = self.location;
	});

	module.exports = F;

/***/ })
/******/ ]);